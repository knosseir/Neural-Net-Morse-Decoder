//--------------------------------------------------------------------
//		Timescale
//		Means that if you do #1 in the initial block of your
//		testbench, time is advanced by 1ns instead of 1ps
//--------------------------------------------------------------------
`timescale 1ns / 1ps

//--------------------------------------------------------------------
//		Design assignment #2, problem #1 sample testbench.
//--------------------------------------------------------------------
module dassign3_2_tb();

//----------------------------------------------------------------
//		Signal Declarations
//----------------------------------------------------------------

// clock
wire clk, wdog;
reg wdog_rst;

// inputs to inter-layer
reg [7:0]   a, b, c, d;
reg [7:0]   ac, bc, cc, dc;
reg         new;

// outputs of inter-layer
wire [7:0]  oa, ob, oc, od;
wire ready;

// delays
reg signed [2:0]   d1, d2, d3, d4;

// variables for testing
integer     i;
reg         ra, rb, rc, rd;
integer     interlayer_err;

//----------------------------------------------------------------
//		Instantiate modules 
//----------------------------------------------------------------
clock_gen     clock_gen(clk);
watchdog_gen  watchdog_gen(clk, wdog_rst, wdog);
interlayer    interlayer(clk, new, a, ra, b, rb, c, rc, d, rd, oa, ob, oc, od, ready);

//----------------------------------------------------------------
//		Test Stimulus
//----------------------------------------------------------------
initial begin
    // Export timing information
    // Warning: slow!
    $dumpfile("timing3_2.vcd");
    $dumpvars;

    // Number of errors detected
    interlayer_err = 0;

    wdog_rst = 1;
    new = 0;
    @(posedge clk); #1

    for(i=8'b0; i<1023; i=i+1) begin
        // Wait for rising edge of clock
        @(posedge clk); #1
        wdog_rst = 0;

        // set inputs to random values
        // and reset the interlayer 
        a = $urandom;
        b = $urandom;
        c = $urandom;
        d = $urandom;

        ra = 0;
        rb = 0;
        rc = 0;
        rd = 0;

        d1 = $urandom;
        d2 = $urandom;
        d3 = $urandom;
        d4 = $urandom;

        new = 1;

        while (~(ra & rb & rc & rd)) begin
          @(posedge clk); #1

          new = 0;

          if (d1 == 0) begin
            ra = 1;
            ac = a;
          end else begin
            d1 = d1-1;
            a = $urandom;
          end

          if (d2 == 0) begin
            rb = 1;
            bc = b;
          end else begin
            d2 = d2-1;
            b = $urandom;
          end

          if (d3 == 0) begin
            rc = 1;
            cc = c;
          end else begin
            d3 = d3-1;
            c = $urandom;
          end

          if (d4 == 0) begin
            rd = 1;
            dc = d;
          end else begin
            d4 = d4-1;
            d = $urandom;
          end
        end

        @(posedge ready or posedge wdog);
        @(posedge clk);

        if (wdog)
          $display("Watchdog! (adder)");
        if(oa !== ac || ob !== bc || oc !== cc || od !== dc || ready !== 1'b1) begin
            interlayer_err=interlayer_err+1;
        end

        @(posedge clk);
        if(ready !== 1'b0) begin
            interlayer_err=interlayer_err+1;
        end

        @(posedge clk);
        if(ready !== 1'b0) begin
            interlayer_err=interlayer_err+1;
        end

        @(posedge clk);
        if(ready !== 1'b0) begin
            interlayer_err=interlayer_err+1;
        end

        @(posedge clk);
        if(ready !== 1'b0) begin
            interlayer_err=interlayer_err+1;
        end

        #1 wdog_rst = 1;
    end

    $display("ASSERTION 3.2(a) : interlayer ERRNO %d",interlayer_err);

    $finish;
end
endmodule

// Clock generation.  Period set via parameter:
//   clock changes every half_period ticks
//   full clock period = 2*half_period
module clock_gen(clk);
    parameter half_period = 31; 
    output clk;
    reg    clk;

    initial clk = 1;
    always #half_period clk = ~clk;
endmodule

module watchdog_gen(clk, rst, wdog);
    input clk, rst;
    output wdog;
    reg    wdog;

    reg [31:0] cnt = 0;

    always @(posedge clk) begin
      cnt <= rst ? 0 : cnt + 1;
      wdog <= (cnt > 50000);
    end
endmodule
